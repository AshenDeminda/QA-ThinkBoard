name: SonarQube Analysis
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('thinkboard/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Build and analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_PROFILES_ACTIVE: ci
        working-directory: ./thinkboard
        run: |
          echo "🔍 Running SonarQube analysis..."
          # Run only unit tests (exclude UI tests) and perform SonarQube analysis
          mvn -B clean compile test -Dtest="!UiTests" verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=AshenDeminda_QA-ThinkBoard -Dsonar.organization=ashendeminda
          echo "✅ SonarQube analysis completed!"

  ui-tests:
    name: UI Tests (Optional)
    runs-on: ubuntu-latest
    needs: sonarqube  # Run after SonarQube analysis
    continue-on-error: true  # Don't fail the entire workflow if UI tests fail
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Try to start frontend server
        working-directory: ./frontend
        run: |
          echo "🚀 Starting frontend server for UI tests..."
          nohup npm run dev > frontend.log 2>&1 &
          echo $! > frontend.pid
          sleep 10
      
      - name: Check if frontend is ready
        id: frontend-check
        run: |
          echo "🔍 Checking if frontend server is ready..."
          for i in {1..15}; do
            if curl --output /dev/null --silent --head --fail http://localhost:5173; then
              echo "✅ Frontend server is ready!"
              echo "ready=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "⏳ Attempt $i/15: Waiting for frontend..."
            sleep 4
          done
          echo "❌ Frontend server not available"
          echo "Frontend logs:"
          cat frontend/frontend.log || echo "No logs available"
          echo "ready=false" >> $GITHUB_OUTPUT
      
      - name: Run UI Tests
        if: steps.frontend-check.outputs.ready == 'true'
        env:
          SPRING_PROFILES_ACTIVE: ci
        working-directory: ./thinkboard
        run: |
          echo "🧪 Running Selenium UI tests..."
          mvn -B test -Dtest="UiTests"
      
      - name: UI Tests Skipped
        if: steps.frontend-check.outputs.ready != 'true'
        run: |
          echo "⚠️ UI tests skipped - frontend server not available"
          echo "This is expected in some CI environments"
      
      - name: Cleanup
        if: always()
        run: |
          if [ -f frontend/frontend.pid ]; then
            kill $(cat frontend/frontend.pid) 2>/dev/null || true
            rm frontend/frontend.pid
          fi